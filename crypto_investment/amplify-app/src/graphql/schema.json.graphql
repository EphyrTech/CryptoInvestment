# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Tells the service this field/object has access authorized by an API key."
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"Directs the schema to enforce authorization on a field"
directive @aws_auth(
    "List of cognito user pool groups which have access on this field"
    cognito_groups: [String]
) on FIELD_DEFINITION

"Tells the service this field/object has access authorized by a Cognito User Pools token."
directive @aws_cognito_user_pools(
    "List of cognito user pool groups which have access on this field"
    cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by sigv4 signing."
directive @aws_iam on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by a Lambda Authorizer."
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by an OIDC token."
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead."
directive @aws_publish(
    "List of subscriptions which will be published to when this mutation is called."
    subscriptions: [String]
) on FIELD_DEFINITION

"Tells the service which mutation triggers this subscription."
directive @aws_subscribe(
    "List of mutations which will trigger this subscription when they are called."
    mutations: [String]
) on FIELD_DEFINITION

"This directive allows results to be deferred during execution"
directive @defer on FIELD

type CryptoPrice {
    Coin: String
    Date: AWSDate
    Price: Float
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
    _version: Int!
    createdAt: AWSDateTime!
    id: ID!
    updatedAt: AWSDateTime!
}

type ModelCryptoPriceConnection {
    items: [CryptoPrice]!
    nextToken: String
    startedAt: AWSTimestamp
}

type Mutation {
    createCryptoPrice(condition: ModelCryptoPriceConditionInput, input: CreateCryptoPriceInput!): CryptoPrice
    deleteCryptoPrice(condition: ModelCryptoPriceConditionInput, input: DeleteCryptoPriceInput!): CryptoPrice
    updateCryptoPrice(condition: ModelCryptoPriceConditionInput, input: UpdateCryptoPriceInput!): CryptoPrice
}

type Query {
    getCryptoPrice(id: ID!): CryptoPrice
    listCryptoPrices(filter: ModelCryptoPriceFilterInput, limit: Int, nextToken: String): ModelCryptoPriceConnection
    syncCryptoPrices(filter: ModelCryptoPriceFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelCryptoPriceConnection
}

type Subscription {
    onCreateCryptoPrice(filter: ModelSubscriptionCryptoPriceFilterInput): CryptoPrice
    onDeleteCryptoPrice(filter: ModelSubscriptionCryptoPriceFilterInput): CryptoPrice
    onUpdateCryptoPrice(filter: ModelSubscriptionCryptoPriceFilterInput): CryptoPrice
}

enum ModelAttributeTypes {
    _null
    binary
    binarySet
    bool
    list
    map
    number
    numberSet
    string
    stringSet
}

enum ModelSortDirection {
    ASC
    DESC
}

"The `AWSDate` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 Date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) string. In other words, this scalar type accepts date strings of the form `YYYY-MM-DD`.  The scalar can also accept \"negative years\" of the form `-YYYY` which correspond to years before `0000`. For example, \"**-2017-05-01**\" and \"**-9999-01-01**\" are both valid dates.  This scalar type can also accept an optional [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators). For example, \"**1970-01-01**\", \"**1970-01-01Z**\", \"**1970-01-01-07:00**\" and \"**1970-01-01+05:30**\" are all valid dates. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard."
scalar AWSDate

"The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept \"negative years\" of the form `-YYYY` which correspond to years before `0000`. For example, \"**-2017-01-01T00:00Z**\" and \"**-9999-01-01T00:00Z**\" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, \"**1970-01-01T12:00:00.2Z**\", \"**1970-01-01T12:00:00.277Z**\" and \"**1970-01-01T12:00:00.123456789Z**\" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard."
scalar AWSDateTime

"The `AWSTimestamp` scalar type provided by AWS AppSync, represents the number of seconds that have elapsed since `1970-01-01T00:00Z`. Negative values are also accepted and these represent the number of seconds till `1970-01-01T00:00Z`.  Timestamps are serialized and deserialized as integers. The minimum supported timestamp value is **`-31557014167219200`** which corresponds to `-1000000000-01-01T00:00Z`. The maximum supported timestamp value is **`31556889864403199`** which corresponds to `1000000000-12-31T23:59:59.999999999Z`."
scalar AWSTimestamp

input CreateCryptoPriceInput {
    Coin: String
    Date: AWSDate
    Price: Float
    _version: Int
    id: ID
}

input DeleteCryptoPriceInput {
    _version: Int
    id: ID!
}

input ModelBooleanInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    eq: Boolean
    ne: Boolean
}

input ModelCryptoPriceConditionInput {
    Coin: ModelStringInput
    Date: ModelStringInput
    Price: ModelFloatInput
    _deleted: ModelBooleanInput
    and: [ModelCryptoPriceConditionInput]
    createdAt: ModelStringInput
    not: ModelCryptoPriceConditionInput
    or: [ModelCryptoPriceConditionInput]
    updatedAt: ModelStringInput
}

input ModelCryptoPriceFilterInput {
    Coin: ModelStringInput
    Date: ModelStringInput
    Price: ModelFloatInput
    _deleted: ModelBooleanInput
    and: [ModelCryptoPriceFilterInput]
    createdAt: ModelStringInput
    id: ModelIDInput
    not: ModelCryptoPriceFilterInput
    or: [ModelCryptoPriceFilterInput]
    updatedAt: ModelStringInput
}

input ModelFloatInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    between: [Float]
    eq: Float
    ge: Float
    gt: Float
    le: Float
    lt: Float
    ne: Float
}

input ModelIDInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    beginsWith: ID
    between: [ID]
    contains: ID
    eq: ID
    ge: ID
    gt: ID
    le: ID
    lt: ID
    ne: ID
    notContains: ID
    size: ModelSizeInput
}

input ModelIntInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    between: [Int]
    eq: Int
    ge: Int
    gt: Int
    le: Int
    lt: Int
    ne: Int
}

input ModelSizeInput {
    between: [Int]
    eq: Int
    ge: Int
    gt: Int
    le: Int
    lt: Int
    ne: Int
}

input ModelStringInput {
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    beginsWith: String
    between: [String]
    contains: String
    eq: String
    ge: String
    gt: String
    le: String
    lt: String
    ne: String
    notContains: String
    size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
    eq: Boolean
    ne: Boolean
}

input ModelSubscriptionCryptoPriceFilterInput {
    Coin: ModelSubscriptionStringInput
    Date: ModelSubscriptionStringInput
    Price: ModelSubscriptionFloatInput
    _deleted: ModelBooleanInput
    and: [ModelSubscriptionCryptoPriceFilterInput]
    createdAt: ModelSubscriptionStringInput
    id: ModelSubscriptionIDInput
    or: [ModelSubscriptionCryptoPriceFilterInput]
    updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionFloatInput {
    between: [Float]
    eq: Float
    ge: Float
    gt: Float
    in: [Float]
    le: Float
    lt: Float
    ne: Float
    notIn: [Float]
}

input ModelSubscriptionIDInput {
    beginsWith: ID
    between: [ID]
    contains: ID
    eq: ID
    ge: ID
    gt: ID
    in: [ID]
    le: ID
    lt: ID
    ne: ID
    notContains: ID
    notIn: [ID]
}

input ModelSubscriptionIntInput {
    between: [Int]
    eq: Int
    ge: Int
    gt: Int
    in: [Int]
    le: Int
    lt: Int
    ne: Int
    notIn: [Int]
}

input ModelSubscriptionStringInput {
    beginsWith: String
    between: [String]
    contains: String
    eq: String
    ge: String
    gt: String
    in: [String]
    le: String
    lt: String
    ne: String
    notContains: String
    notIn: [String]
}

input UpdateCryptoPriceInput {
    Coin: String
    Date: AWSDate
    Price: Float
    _version: Int
    id: ID!
}
